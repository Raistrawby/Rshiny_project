theme_bw()
dev.off()
png(filename="test.png", width=600, height=300)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
dev.off()
png(filename="test.png", width=900, height=400)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
dev.off()
png(filename="test.png", width=800, height=340)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
dev.off()
png(filename="test.png", width=800, height=340, dpi=150)
png(filename="test.png", width=800, height=340, dpi=150)
png(filename="test.png", width=800, height=340)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=4, height=4, dpi=300)
dev.off()
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=8, height=4, dpi=300)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=10, height=4, dpi=300)
library(tidyverse)
data <- read.table("results.csv", header=TRUE, sep=",")
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=10, height=4, dpi=300)
library(tidyverse)
data <- read.table("results.csv", header=TRUE, sep=",")
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=10, height=4, dpi=300)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=10, height=8, dpi=300)
ggplot(data, aes(reads, isoforms, colour = tool)) +
facet_wrap(~sample)+
geom_point() +
geom_smooth(method=loess, se=FALSE) +
theme_bw()
ggsave(file="bench_query_sort.pdf", width=8, height=6, dpi=300)
library(tidyverse)
data = read_tsv("bambu.CanFam3_classification.txt")
View(data)
data = read_tsv(col_types = cols(chrom = col_character(())) ,"bambu.CanFam3_classification.txt", )
data = read_tsv(col_types = cols(chrom = col_character()) ,"bambu.CanFam3_classification.txt", )
data = read_tsv("bambu.CanFam3_classification.txt", col_types = cols(chrom = col_character()))
data = read_tsv("bambu.CanFam3_classification.txt", col_types = cols(chrom = col_character()))
library(tidyverse)
data = read_tsv("bambu.CanFam3_classification.txt", col_types = cols(chrom = col_character()))
data
data %>%
count(structural_category)
data %>%
count(structural_category) %>%
sort(n)
data %>%
count(structural_category)
data %>%
count(structural_category) %>%
sort(x = n)
data %>%
count(structural_category)
data %>%
count(structural_category) %>%
sort()
data %>%
count(structural_category)
data %>%
count(structural_category, sort = T)
data %>% count(structural_category, sort = T)
data %>% count(structural_category, subcategory, sort = T)
data %>% count(structural_category, coding, sort = T)
data %>% count(structural_category, sort = T)
data %>% count(associated_gene) %>% filter(novel)
data %>% count(associated_gene)
data %>% count(associated_gene, sort=T)
data %>% count(associated_gene, sort=T) %>% filter(associated_gene, str_detect("^novel"))
data %>% count(associated_gene, sort=T) %>% filter(str_detect("^novel", associated_gene))
data %>% count(associated_gene, sort=T) %>% filter(str_detect("^novel", associated_gene))
data %>% count(associated_gene, sort=T) %>% filter(str_detect("^novel"))
data %>% count(associated_gene, sort=T) %>% filter(str_detect(pattern = "^novel"))
data %>% count(associated_gene, sort=T) %>% filter(str_detect(associated_gene, "^novel"))
data %>% count(associated_gene, sort=T) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
data %>% distinct(associated_gene)
data %>% distinct(associated_gene) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
data %>% distinct(associated_gene) %>% count()
novelGenes = data %>% distinct(associated_gene) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
data %>% distinct(associated_gene) %>% count() - novelGenes
annotatedGenes = data %>% distinct(associated_gene) %>% count() - novelGenes
novelGenes
annotatedGenes
novelGenes
annotatedGenes
isoformsCategories = data %>% count(structural_category)
isoformsCategories
hist(isoformsCategories)
ggplot(isoformsCategories) +
hist()
ggplot(isoformsCategories) +
geom_histogram()
ggplot(isoformsCategories) +
geom_histogram(aes(x = n))
ggplot(data) +
geom_histogram(aes(x = structural_category))
ggplot(data) +
geom_histogram(aes(x = structural_category))
ggplot(data) +
geom_histogram(aes(x = structural_category), stat = "count")
ggplot(data) +
geom_histogram(aes(x = structural_category), stat = "count")
ggplot(data) +
geom_bar(aes(x = structural_category), stat = "count")
ggplot(data) +
geom_bar(aes(x = structural_category), stat = "identity")
ggplot(data) +
geom_bar(aes(x = isoformsCategories, y = n), stat = "identity")
ggplot(isoformsCategories) +
geom_bar(aes(x = structural_category, y = n), stat = "identity")
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity")
data %>% count(all_canonical)
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_bw()
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_minimal()
bw()
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_bw()
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 15, hjust = 1))
ggplot(isoformsCategories) +
geom_col(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(isoformsCategories) +
geom_bar(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(isoformsCategories) +
geom_bar(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
coord_flip() +
theme(axis.text.x = element_text(angle = 30, hjust = 1))
ggplot(isoformsCategories) +
geom_bar(aes(x = structural_category, y = n), stat = "identity") +
theme_bw() +
coord_flip()
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, n), y = n), stat = "identity") +
theme_bw() +
coord_flip()
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, -n), y = n), stat = "identity") +
theme_bw() +
coord_flip()
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, n), y = n), stat = "identity") +
theme_bw() +
coord_flip()
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, n), y = n), stat = "identity") +
theme_bw()
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, -n), y = n), stat = "identity") +
theme_bw()
+
coord_flip()
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, n), y = n), stat = "identity") +
theme_bw() +
coord_flip()
isoformsCategories
ggplot(isoformsCategories) +
geom_bar(aes(x = reorder(structural_category, n), y = n), stat = "identity") +
theme_bw() +
coord_flip()
data = data %>% select(isoform, chrom, strand, exons, structural_category, associated_gene, associated_transcript, subcategory, all_canonical, coding)
data
# Genes
genes$novel = data %>% distinct(associated_gene) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
# Genes
gene = tibble(novel = numeric(), annotated = numeric())
genes$novel = data %>% distinct(associated_gene) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
gene$novel = data %>% distinct(associated_gene) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
gene$annotated = data %>% distinct(associated_gene) %>% count() - novelGenes
gene
gene
View(gene)
# Genes
novel = data %>% distinct(associated_gene) %>% filter(str_detect(associated_gene, "^novel")) %>% count()
annotated = data %>% distinct(associated_gene) %>% count() - novelGenes
View(tibble(novel, annotated))
View(tibble(novel, annotated))
annotated = data %>% distinct(associated_gene) %>% count() - novelGenes
annotated
annotated = data %>% distinct(associated_gene) %>% count() %>% select(n) - novelGenes
annotated
View(tibble(novel %>% select(n), annotated %>% select(n)))
annotated
View(tibble(novel, annotated, colnames("Novel", "Annotated"))
View(tibble(novel, annotated, colnames("Novel", "Annotated"))
tibble(novel, annotated, colnames("Novel", "Annotated")
annotated
tibble(novel, annotated, colnames("Novel", "Annotated"))
tibble(novel, annotated, colnames(c("Novel", "Annotated")))
tibble(Novel = novel, Annotated = annotated, colnames(c("Novel", "Annotated")))
tibble(Novel = novel, Annotated = annotated)
tibble(Novel = novel$n, Annotated = annotated$n)
csv = NULL
csv
test = c(10)
test
append(test, 20)
test
test = append(test, 20)
test
test_2 = c(40)
test_2 = append(test_2, 50)
test_2
write_csv(test, test_2, file="test.csv", col_names = c("Test 1", "Test 2"))
df = as.data.frame(test, test_2)
df
df = as.data.frame(c(test, test_2)
df = as.data.frame(c(test, test_2))
df = as_tibble(test, test_2)
df
df = as_tibble(test, test_2)
df
df = as_tibble_row(test, test_2)
df
test = 10
test_2 = 20
df = as_tibble_row(test, test_2)
df
df = as_tibble_row(test, test_2)
df
df_test = as_tibble_row(test, test_2)
df = as_tibble_row(c(a = test, b = test_2))
df
df = as_tibble_row(c(test, test_2))
df = as_tibble_row(c(Test = test, Test2 = test_2))
df
csv["test]= "test
csv['test']='test
csv['test']='test'
csv['test']='test'
csv['test']='test'
csv = {}
csv['test']='test'
csv
csv['autre_test']='autre_test'
csv
View(csv)
csv['test','autre']='test'
View(csv)
csv = {c('col1', 'col2')}
View(csv)
csv = {c('col1', 'col2'), 'test'}
csv = {c(a='col1', b='col2')}
View(csv)
install.packages(c("backports", "broom", "callr", "cli", "clipr", "codetools", "colorspace", "cpp11", "data.table", "dbplyr", "digest", "DT", "FactoMineR", "generics", "gh", "htmlwidgets", "isoband", "jsonlite", "KernSmooth", "labeling", "lme4", "lubridate", "magrittr", "MASS", "mgcv", "nlme", "openxlsx", "pbdZMQ", "pillar", "processx", "ps", "quantreg", "R6", "RcppArmadillo", "readr", "rlang", "rmarkdown", "rprojroot", "rstudioapi", "statmod", "survival", "testthat", "tibble", "tinytex", "usethis", "vctrs", "xfun"))
library(FactoMineR)
library(reshape2)
library(hrbrthemes)
library(viridis)
data <- read.csv("data.txt", header = T, sep="\t", row.names=1)
View(data)
new_data=data[,c(1,2,3,4,5,6,7,8,9,10)]
ggplot(melt(new_data, value.name = "Temps", variable.name = "Variables"), aes(Variables, Temps)) + geom_boxplot()
library("factoextra")
var <- get_pca_var(res.pca)
library("corrplot")
# Cos2 représentation la qualité de représentation des variables sur l'axe.
corrplot(var$cos2[,c(1,2,3,4)], is.corr=FALSE, cl.pos = "n")
library(FactoMineR)
library(reshape2)
library(hrbrthemes)
library(viridis)
data <- read.csv("data.txt", header = T, sep="\t", row.names=1)
View(data)
new_data=data[,c(1,2,3,4,5,6,7,8,9,10)]
ggplot(melt(new_data, value.name = "Temps", variable.name = "Variables"), aes(Variables, Temps)) + geom_boxplot()
ggplot(data) +
aes(x= )
geom_boxplot()
heatmap(cor(scale(new_data)),keep.dendro = FALSE, dendrogram='none' )
ggplot(melt(cor(scale(new_data)))) +
aes(x= Var1, y= Var2, fill=value) +
geom_tile() +
scale_fill_viridis(discrete=FALSE) +
theme_ipsum() +
labs(fill = "Corrélation", x = NULL, y= NULL) +
coord_equal() +
scale_x_discrete(guide = guide_axis(angle = 90))
res.pca <- PCA(data[,c(1,2,3,4,5,6,7,8,9,10)], scale.unit = T)
cor(new_data)
library("factoextra")
var <- get_pca_var(res.pca)
res.pca$eig
## Install the library if needed then load it
if(!require("pasilla")){
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
}
if(!require("pasilla")){
BiocManager::install("pasilla")
}
if(!require("clusterProfiler")){
BiocManager::install("clusterProfiler")
}
if(!require("org.Dm.eg.db")){
BiocManager::install("org.Dm.eg.db")
}
library(pasilla)
library("org.Dm.eg.db")
library(clusterProfiler)
## Install the library if needed then load it
if(!require("pasilla")){
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
## Install the library if needed then load it
if(!require("pasilla")){
source("http://bioconductor.org/biocLite.R")
biocLite("pasilla")
}
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
if(!require("pasilla")){
BiocManager::install("pasilla")
}
if(!require("clusterProfiler")){
BiocManager::install("clusterProfiler")
}
if(!require("org.Dm.eg.db")){
BiocManager::install("org.Dm.eg.db")
}
library(pasilla)
library(pasilla)
library("org.Dm.eg.db")
library(clusterProfiler)
setwd("~/Developer")
shiny::runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
fileInputBox <- function() {
fileInput(
"file1",
"Select your CSV DE File",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv"
)
)
tags$hr()
checkboxInput("header", "Header", TRUE)
}
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
}
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp('Rshiny_project')
runApp()
runApp('Rshiny_project')
runApp()
runApp('Rshiny_project')
runApp()
runApp('Rshiny_project')
setwd("~/Developer/R/Rshiny_project")
runApp()
runApp()
fluidPage(# Application title
titlePanel("Projet Rshiny"),
sidebarLayout(
sidebarPanel(
fileInput("input", "Choose CSV File", accept = c(".csv")),
checkboxInput("header", "Header", TRUE)
),
mainPanel(tableOutput("contents"))
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(sidebarLayout(
sidebarPanel(),
mainPanel("Test")
))
goUI <- function() {
fluidPage(sidebarLayout(
sidebarPanel(),
mainPanel("Test")
))
}
runApp()
runApp()
runApp()
fluidPage(sidebarLayout(
sidebarPanel(),
mainPanel("test")
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fluidPage(sidebarLayout(
sidebarPanel(),
mainPanel("goContent")
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
